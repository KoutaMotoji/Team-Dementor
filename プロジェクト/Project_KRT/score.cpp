//===============================================================================
//
//  スコアの表示・数字ポリゴンの計算処理(score.cpp)
//								制作：元地弘汰
// 
//===============================================================================
#include "score.h"
#include "manager.h"

const D3DXVECTOR3 CScore::DEFAULT_POSITION = { SCREEN_WIDTH - MAX_WIDTH / 2,MAX_HEIGHT,0.0f };
int CScore::SaveScore = 0;
namespace			//定数用無名名前空間
{
	float POS_INTERVAL = 80.0f / 1.95;
	float POS_INTERVAL_OR = 80.0f / 1.75f;
}

CScore::CScore() : m_Score(0)
{

}

CScore::~CScore()
{

}

//==========================================================================================
//初期化処理
//==========================================================================================
void CScore::Init()
{
	D3DXVECTOR3 pos = DEFAULT_POSITION;
	for (int i = 0; i < MAX_DIGIT; ++i)
	{
		m_number[i] = CNumber::Create(pos, MAX_HEIGHT, MAX_WIDTH);
		pos.x -= POS_INTERVAL;
	}
}

//==========================================================================================
//初期化処理(オーバーロード)
//==========================================================================================
void CScore::Init(D3DXVECTOR3 pos)
{
	for (int i = 0; i < MAX_DIGIT; ++i)
	{
		m_number[i] = CNumber::Create(pos, MAX_HEIGHT, MAX_WIDTH);
		pos.x -= POS_INTERVAL_OR;
	}
}

//==========================================================================================
//終了処理
//==========================================================================================
void CScore::Uninit()
{
	for (int i = 0; i < MAX_DIGIT; ++i)
	{
		m_number[i]->Uninit();
	}
}

//==========================================================================================
//更新処理
//==========================================================================================
void CScore::Update()
{
	for (int i = 0; i < MAX_DIGIT; ++i)
	{
		m_number[i]->Update();
	}
}

//==========================================================================================
//描画処理
//==========================================================================================
void CScore::Draw()
{
	for (int i = 0; i < MAX_DIGIT; ++i)
	{
		m_number[i]->Draw();
	}
}

//==========================================================================================
//生成処理
//==========================================================================================
CScore* CScore::Create()
{
	CScore* number = new CScore;
	number->Init();
	return number;
}

//==========================================================================================
//生成処理(オーバーロード)
//==========================================================================================
CScore* CScore::Create(D3DXVECTOR3 pos)
{
	CScore* number = new CScore;
	number->Init(pos);
	return number;
}

//==========================================================================================
//数値の各桁の数字を抜き出す
//==========================================================================================
void CScore::GetLastNum()
{
	int nType = 1;
	int nValue = m_Score;		//スコアをローカルにコピー
	int Num = 0;
	for (int i = 0; i < MAX_DIGIT; ++i)
	{
		nType *= 10;			//桁数計算用の数値を設定
		Num = (nValue % nType * 10) / nType;	//指定桁数の数字を抜き出す
		m_number[i]->SetNum(Num);				//抜き出した数字をポリゴン表示用クラスに渡す
	}
}
